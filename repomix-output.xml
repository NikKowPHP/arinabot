This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
telegram_bot/
  bot.py
  guide_config.json
  requirements.txt
.gitignore
bot_implementation_plan.md
Dockerfile
telegram_subscriber_bot_description.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
__pycache__/
*.pyc
*.log
venv/
.env
</file>

<file path="telegram_bot/guide_config.json">
{"guide_reference": "https://ec-bievres.ac-versailles.fr/IMG/pdf/test_pdf.pdf", "reference_type": "url"}
</file>

<file path="Dockerfile">
FROM python:3.9-slim-buster

WORKDIR /app

COPY ./telegram_bot/requirements.txt .
RUN pip install -r requirements.txt

COPY . .

CMD ["python", "telegram_bot/bot.py"]
</file>

<file path="telegram_bot/requirements.txt">
python-telegram-bot
python-dotenv
</file>

<file path="telegram_subscriber_bot_description.md">
# Telegram Bot: Guide Access

This document outlines the specifications for a Telegram bot designed to provide a guide link.

## Important Prerequisites

*   The **User ID** of the bot administrator(s) must be known and configured for admin commands.

## 1. Bot Name Suggestions (`/setname` in BotFather)

*   [Your Topic] Guide Bot
*   Guide Access
*   [Your Topic] Guide
*   Verified Guide Access

## 2. Welcome Message (`/start` command)

*(Presents a button to initiate the process)*

*   **Message:**
    "Hello! üëã This bot provides the **[Your Topic] Guide**.\n\n‚û°Ô∏è Click the button below to get the guide."
*   **Inline Keyboard Button:**
    *   Text: `‚úÖ Get Guide`
    *   Callback Data: `get_guide` (or similar identifier)

## 3. Bot Reply Logic (User clicks the 'Get Guide' button)

*   **STEP 1: Handle Button Click (Triggered by Callback Query)**
    *   The bot receives a callback query with data `get_guide` (or the identifier set on the button).
    *   *(Optional but recommended)* The bot should answer the callback query (e.g., with a brief "Getting guide..." notification) to provide feedback to the user that the button press was registered.

*   **STEP 2: Provide Guide**
    *   **Action:** The bot retrieves the currently configured guide reference (e.g., a PDF `file_id` or a URL).
    *   **Message 1:** "Thanks for your interest! ‚úÖ"
    *   **Message 2 (Option PDF):** Sends the configured PDF file directly to the user.
    *   **Message 2 (Option Link):** "Here is the guide link you requested:\n[Stored Guide Link Here]"

## 4. Short Description (`/setdescription` in BotFather)

*   Sends the [Topic] guide.
*   Guide link via button.
*   Get the [Topic] guide via button.

## 5. About Text (`/setabouttext` in BotFather)

*   **Option A (Clear Process with Button):**
    "This bot provides the **[Your Topic] Guide**. \n\n**How to get the guide:**\n1. Start this bot (or type `/start`).\n2. Click the 'Get Guide' button.\n3. You'll receive the guide link or file."

*   **Option B (Focus on Guide Access with Button):**
    "Welcome! Get access to the **[Your Topic] Guide**! Click the button below to get the guide instantly."

---

## 6. Admin Commands

*   **Purpose:** Allow designated admin(s) to set the guide file/link the bot distributes.
*   **Admin Identification:** The bot needs a configured list of admin User IDs. Commands from other users should be ignored or rejected.
*   **Command:** `/setguide`
    *   **Method 1 (Recommended: Using File ID):**
        1.  Admin uploads the desired PDF guide directly to the chat with the bot.
        2.  Admin replies to the uploaded PDF message with the command `/setguide`.
        3.  **Bot Action:** Extracts the `file_id` of the PDF from the replied-to message, stores this `file_id` persistently (e.g., in a simple file, database, or bot's context persistence if configured), and confirms the update to the admin.
        4.  **Bot Reply:** "‚úÖ Guide updated successfully. I will now send this PDF."
    *   **Method 2 (Using URL):**
        1.  Admin sends the command `/setguide <URL_to_PDF>`.
        2.  **Bot Action:** Stores the provided `<URL_to_PDF>` persistently and confirms the update.
        3.  **Bot Reply:** "‚úÖ Guide link updated successfully. I will now send this link."
    *   **Error Handling:**
        *   If `/setguide` is used without replying to a PDF (Method 1) or without a URL (Method 2): "Usage: Reply to a PDF message with `/setguide` or use `/setguide <URL>`."
        *   If the user is not a configured admin: "‚ùå Sorry, this command is only available to bot administrators."
        *   If the replied-to message doesn't contain a PDF document: "‚ùå Please reply to a PDF file message with `/setguide`."

---

**Note:** Remember to replace `[Your Topic]` with your specific details. The `[Your Guide Link Here]` placeholder is now replaced by a dynamic mechanism managed via the `/setguide` command.
</file>

<file path="bot_implementation_plan.md">
# Telegram Guide Bot - Implementation Plan

This document outlines the steps required to develop, test, and deploy the Telegram guide bot.
 pip3: Always prefer using python3 and pip3 to avoid conflicts with the older system Python 2 (if present).


**Project Files:**
*   `telegram_subscriber_bot_description.md`: Bot specifications and messages.
*   `telegram_bot/`: Directory containing bot code and resources.
*   `telegram_bot/guide.pdf`: Placeholder for the actual guide file.
*   `telegram_bot/bot.py`: Main bot script (to be completed).
*   `telegram_bot/requirements.txt`: Python dependencies (to be created).

---

## Phase 1: Setup & Initial Configuration

*   [ ] **Finalize Project Structure:**
    *   [X] Create `telegram_bot/` directory.
    *   [X] Create placeholder `telegram_bot/guide.pdf`.
    *   [x] Create `telegram_bot/bot.py` (initial structure started).
    *   [x] Create `telegram_bot/requirements.txt`.
*   [ ] **Version Control:**
    *   [x] Initialize Git repository in the project root (`/Users/mikitakavaliou/projects/aribot` or a dedicated subfolder if preferred).
    *   [X] Create a `.gitignore` file (e.g., for `__pycache__`, `.env`, virtual environment folders).
    *   [x] Make initial commit.
*   [ ] **Python Environment:**
    *   [ ] Set up a virtual environment (e.g., `python -m venv venv`).
    *   [ ] Activate the virtual environment.
*   [X] **Dependencies:**
    *   [X] Add `python-telegram-bot` to `requirements.txt`.
    *   [ ] Install dependencies: `pip install -r telegram_bot/requirements.txt`.
*   [x] **Telegram Bot Setup:**
    *   [x] Create the bot using BotFather on Telegram.
    *   [x] Obtain the **Bot Token**.
    *   [x] Set the bot's name (using suggestions from the description doc).
*   [X] **Configuration:**
    *   [X] Decide on configuration method (environment variables recommended, or a config file).
    *   [X] Securely store/set the `BOT_TOKEN`.
    *   [X] Define `ADMIN_USER_IDS` (comma-separated string of admin Telegram User IDs).
    *   [X] Define `[Your Topic]` placeholder value.
    *   [X] Decide on persistence method for the guide reference (e.g., simple text file, JSON file, database). Create placeholder if needed (e.g., `guide_config.json`).

---

## Phase 2: Core Bot Development (`telegram_bot/bot.py`)

*   [X] **Basic Application Setup:**
    *   [X] Import necessary libraries (`os`, `json`, `logging`, `telegram`, `telegram.ext`).
    *   [X] Set up basic logging configuration.
    *   [X] Load configuration (token, admin IDs).
    *   [X] Implement logic to load the current guide reference (file_id/URL) from persistence on startup.
    *   [X] Create the `telegram.ext.Application` instance.
*   [X] **`/start` Command Handler:**
    *   [X] Implement the `start` function.
    *   [X] Construct the welcome message using text from the description doc (Phase 2, Item 2).
    *   [X] Create the `InlineKeyboardMarkup` with the "Get Guide" button (callback data: `get_guide`).
    *   [X] Send the welcome message with the inline button.
    *   [X] Register the `CommandHandler` for "start".
*   [X] **Button Callback Handler:**
    *   [X] Implement the `button_callback` function.
    *   [X] Register the `CallbackQueryHandler`.
    *   [X] Answer the callback query (`query.answer(...)`) for responsiveness.
    *   [X] Check if `callback_data` is `get_guide`.
*   [X] **Provide Guide Logic:**
    *   [X] Inside the callback handler, get `user_id`.
    *   [X] Retrieve the currently stored guide reference (file_id or URL) from memory/persistence.
    *   [X] Construct the success message (Phase 2, Item 3 - Message 1).
    *   [X] Send the success message.
    *   [X] If a `file_id` is stored, use `context.bot.send_document(chat_id=user_id, document=stored_file_id)`.
    *   [X] If a URL is stored, send a message containing the URL.
    *   [X] Handle the case where no guide has been set yet by the admin.
*   [X] **Error Handling:**
    *   [X] Implement specific error handling within the `try...except` block for potential API errors.
    *   [X] Log errors effectively.
    *   [X] Send user-friendly error messages when appropriate (e.g., "Sorry, an error occurred...").
*   [X] **Admin Command Handler (`/setguide`):**
    *   [X] Implement the `set_guide` function.
    *   [X] Register the `CommandHandler` for "setguide".
    *   [X] Implement admin check: Verify `update.effective_user.id` is in the configured `ADMIN_USER_IDS`. Reject if not.
    *   [X] **Method 1 (File ID):**
        *   [X] Check if the command message is a reply (`update.message.reply_to_message`).
        *   [X] Check if the replied-to message contains a document (`reply_to_message.document`).
        *   [X] Check if the document is a PDF (check `mime_type` or filename extension).
        *   [X] Extract the `file_id` (`reply_to_message.document.file_id`).
        *   [X] Store the `file_id` persistently (overwrite previous value).
        *   [X] Send confirmation message to admin.
    *   [X] **Method 2 (URL):**
        *   [X] Check if the command has arguments (`context.args`).
        *   [X] Validate if the argument looks like a URL (basic check).
        *   [X] Store the URL persistently (overwrite previous value).
        *   [X] Send confirmation message to admin.
    *   [X] **Error Handling:** Implement checks and messages for incorrect usage (no reply/args, not PDF, not admin) as per the description doc.
*   [X] **Persistence Logic:**
    *   [X] Implement functions to save the guide reference (file_id/URL) to the chosen persistent storage (e.g., writing to `guide_config.json`).
    *   [X] Implement function to load the guide reference on bot startup.
*   [X] **Logging:**
    *   [X] Add informative log messages for key events (start, button click, errors, admin commands).

---

## Phase 3: Refinement & Testing

*   [X] **Code Review & Cleanup:**
    *   [X] Ensure all placeholders (`[Your Topic]`, etc.) are correctly replaced or loaded from config.
    *   [ ] Review code for clarity, efficiency, and adherence to Python best practices.
    *   [ ] Add comments where necessary.
*   [ ] **Functional Testing (Manual):**
    *   [ ] Test `/start` command: Does the welcome message and button appear correctly?
    *   [ ] Test user flow when a guide is set: Click the button, does the guide appear?
    *   [ ] Test user flow when no guide has been set yet by the admin yet.
*   [ ] **Admin Command Testing:**
    *   [ ] Test `/setguide` by replying to a PDF: Does it store the file_id and confirm?
    *   [ ] Test `/setguide <URL>`: Does it store the URL and confirm?
    *   [ ] Test `/setguide` by non-admin: Is it rejected?
    *   [ ] Test `/setguide` with incorrect usage (no reply/URL, reply to non-PDF): Are the correct error messages shown?
    *   [ ] After setting a guide (PDF/URL), test the normal user flow again: Is the *correct* guide sent?
    *   [ ] Test setting a PDF, then setting a URL, then setting another PDF: Does it correctly switch between methods?
*   [ ] **Persistence Testing:**
    *   [ ] Set a guide using `/setguide`.
    *   [ ] Restart the bot.
    *   [ ] Test the user flow: Does the bot remember and send the previously set guide?
*   [ ] **Edge Case Testing:**
    *   [ ] Test rapid button clicks.
*   [ ] **Error Message Testing:**
    *   [ ] Simulate error conditions (if possible) to verify user-facing error messages.
*   [ ] **Logging Verification:**
    *   [ ] Run the bot and check if logs capture the expected information and errors.

---

## Phase 4: Deployment (Production)

*   [ ] **Choose Hosting:**
    *   [ ] Select a hosting platform (e.g., VPS, Heroku, Render, PythonAnywhere, AWS Lambda/Google Cloud Functions). Consider cost, scalability, and ease of use.
*   [ ] **Prepare Environment:**
    *   [ ] Set up the production environment (install Python, Git).
    *   [ ] Clone the Git repository.
    *   [ ] Set up a production virtual environment.
    *   [ ] Install dependencies (`pip install -r telegram_bot/requirements.txt`).
    *   [ ] Configure **production** environment variables/config file (BOT_TOKEN, ADMIN_USER_IDS). **Do not commit sensitive data.**
    *   [ ] Ensure the persistence file/mechanism is correctly set up with appropriate permissions in production.
*   [ ] **Process Management:**
    *   [ ] If using a VPS/server, configure a process manager (like `systemd` or `supervisor`) to:
        *   Run the `bot.py` script.
        *   Automatically restart the bot if it crashes.
        *   Manage logs.
    *   [ ] If using a PaaS/FaaS, follow their specific deployment instructions.
*   [ ] **Deploy:**
    *   [ ] Push final code to Git remote (if applicable).
    *   [ ] Deploy the code to the hosting platform.
    *   [ ] Start the bot process.
*   [ ] **Final BotFather Configuration:**
    *   [ ] Use `/setdescription` to set the short description (from description doc).
    *   [ ] Use `/setabouttext` to set the about text (from description doc).
    *   [ ] Consider using `/setcommands` to list the `/start` command.
*   [ ] **Post-Deployment Check:**
    *   [ ] Perform basic functional tests on the live bot.
    *   [ ] Check production logs for any immediate errors.

---

## Phase 5: Maintenance & Monitoring

*   [ ] **Monitoring:**
    *   [ ] Set up basic uptime monitoring (if applicable to the hosting).
    *   [ ] Implement error monitoring/alerting (e.g., Sentry integration, or log monitoring).
*   [ ] **Logging:**
    *   [ ] Ensure logs are being collected and rotated appropriately.
    *   [ ] Periodically review logs for warnings or recurring errors.
*   [ ] **Updates:**
    *   [ ] Regularly update dependencies (`python-telegram-bot`, etc.) after testing.
    *   [ ] Keep the host system/environment updated.
*   [ ] **API Changes:**
    *   [ ] Stay informed about Telegram Bot API changes that might affect the bot's functionality.

---
</file>

<file path="telegram_bot/bot.py">
import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import BadRequest
from dotenv import load_dotenv
import traceback # Import the traceback module
from telegram.helpers import escape_markdown # Import escape_markdown from correct location

# Load environment variables from .env file
load_dotenv()

# --- Configuration ---
# Load configuration from environment variables
BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
TARGET_CHANNEL_USERNAME = os.environ.get("TARGET_CHANNEL_USERNAME", "") # Make TARGET_CHANNEL_USERNAME optional
ADMIN_USER_IDS = os.environ["ADMIN_USER_IDS"].split(",")
GUIDE_CONFIG_FILE = "telegram_bot/guide_config.json"
GUIDE_TOPIC = os.environ.get("GUIDE_TOPIC", "Default Topic") # Add GUIDE_TOPIC configuration

# --- Logging Setup ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)  # Reduce httpx verbosity
logger = logging.getLogger(__name__)

# --- Load Guide Configuration ---
def load_guide_config():
    try:
        with open(GUIDE_CONFIG_FILE, "r") as f:
            config = json.load(f)
            return config.get("guide_reference"), config.get("reference_type")
    except FileNotFoundError:
        logger.warning(f"Guide config file not found: {GUIDE_CONFIG_FILE}. Using default (None).")
        return None, None
    except json.JSONDecodeError:
        logger.error(f"Error decoding JSON from {GUIDE_CONFIG_FILE}. Check file contents.")
        return None, None

# --- Save Guide Configuration ---
def save_guide_config(guide_reference, reference_type):
    try:
        with open(GUIDE_CONFIG_FILE, "w") as f:
            json.dump({"guide_reference": guide_reference, "reference_type": reference_type}, f)
    except Exception as e:
        logger.error(f"Error saving guide config to {GUIDE_CONFIG_FILE}: {e}")

# Load initial guide reference from file
GUIDE_REFERENCE, REFERENCE_TYPE = load_guide_config()

# --- Admin Check ---
def is_admin(user_id: int) -> bool:
    return str(user_id) in ADMIN_USER_IDS

# --- Bot Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends the welcome message with the verification button."""
    user = update.effective_user
    logger.info(f"User {user.id} ({user.username}) started the bot.")

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{GUIDE_TOPIC} –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ**, —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ **{TARGET_CHANNEL_USERNAME}**.\n\n"
        f"‚û°Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.\n\n"
        f"*–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ **{TARGET_CHANNEL_USERNAME}**, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.*"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", callback_data="check_subscription")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles the button click (callback query)."""
    query = update.callback_query
    user_id = query.from_user.id
    username = query.from_user.username
    callback_data = query.data

    logger.info(f"Received callback query from user {user_id} ({username}) with data: {callback_data}")

    # Answer the callback query to remove the "loading" state on the button
    await query.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")

    if callback_data == "check_subscription":
        # The channel membership check has been removed as per user request.
        # The bot will now send the guide to anyone who clicks the button.

        await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å! ‚úÖ", parse_mode=ParseMode.MARKDOWN)

        if GUIDE_REFERENCE:
            if REFERENCE_TYPE == "file_id":
                try:
                    await context.bot.send_document(chat_id=user_id, document=GUIDE_REFERENCE)
                except Exception as e:
                    logger.error(f"Error sending document to user {user_id}: {e}")
                    await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode=ParseMode.MARKDOWN)

            elif REFERENCE_TYPE == "url":
                # Escape special characters in the URL for Markdown
                escaped_guide_reference = escape_markdown(GUIDE_REFERENCE, version=2)
                await query.message.reply_text(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏:\n{escaped_guide_reference}", parse_mode=ParseMode.MARKDOWN_V2) # Use MARKDOWN_V2
            else:
                logger.warning(f"Invalid REFERENCE_TYPE: {REFERENCE_TYPE}")
                await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode=ParseMode.MARKDOWN)
        else:
            logger.info("No guide has been set yet.")
            await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode=ParseMode.MARKDOWN)

    else:
        logger.warning(f"Received unknown callback data: {callback_data}")
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

async def set_guide(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Allows an admin to set the guide file (PDF) or link."""
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.")
        return

    if update.message.reply_to_message:
        # Method 1: Using File ID
        if update.message.reply_to_message.document:
            document = update.message.reply_to_message.document
            if document.mime_type == "application/pdf" or document.file_name.endswith(".pdf"):
                file_id = document.file_id
                save_guide_config(file_id, "file_id")
                GUIDE_REFERENCE = file_id
                REFERENCE_TYPE = "file_id"
                await update.message.reply_text("‚úÖ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ—Ç PDF –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
                logger.info(f"Admin {user.id} set guide to file_id: {file_id}")
            else:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å PDF-—Ñ–∞–π–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è `/setguide`.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å PDF-—Ñ–∞–π–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è `/setguide`.")
    elif context.args:
        # Method 2: Using URL
        url = context.args[0]
        # Basic URL validation (can be improved)
        if url.startswith("http://") or url.startswith("https://"):
            save_guide_config(url, "url")
            GUIDE_REFERENCE = url
            REFERENCE_TYPE = "url"
            await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
            logger.info(f"Admin {user.id} set guide to URL: {url}")
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É—è `/setguide <URL>`.")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å PDF, –∏—Å–ø–æ–ª—å–∑—É—è `/setguide`, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/setguide <URL>`.")

def main() -> None:
    """Start the bot."""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or TARGET_CHANNEL_USERNAME == "@YourChannelUsername":
        logger.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –¥–ª—è BOT_TOKEN –∏ TARGET_CHANNEL_USERNAME –≤ —Å–∫—Ä–∏–ø—Ç–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        # You might want to exit here if configuration is missing
        # return

    # Create the Application and pass it your bot's token.
    application = Application.builder().token(BOT_TOKEN).build()

    # Register handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(CommandHandler("setguide", set_guide))

    # Add error handler (optional but recommended)
    # Add error handler (optional but recommended)
    application.add_error_handler(error_handler)

    logger.info("Starting bot polling...")
    # Run the bot until the user presses Ctrl-C
    application.run_polling()

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we have it even if an error occurs while handling it.
    logger.error("Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python traceback, but as a list of strings
    # and we want to send it in one message
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    # Build the message with some markup and additional information about the update to make it easier to compare
    # seemingly unrelated errors.
    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message = (
        f"An exception was raised while handling an update\n"
        f"<pre>update = {html.escape(json.dumps(update_str, indent=2))}"
        "</pre>\n\n"
        f"<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n"
        f"<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n"
        f"<pre>{html.escape(tb_string)}</pre>"
    )

    # Send the error message to the admin
    for admin_id in ADMIN_USER_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id, text=message, parse_mode=ParseMode.HTML
            )
        except Exception:
            logger.error("Could not send exception tree to admin", exc_info=True)



if __name__ == "__main__":
    main()
</file>

</files>
